// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum SectorType {
  multiApartment
  private
  other
}

enum PaymentSource {
  cash
  privatbank
  oshchadbank
  postage
  ukrsibbank
  benefits
  adjustment
  aval
  ukrgasbank
  abank
}

model User {
  id Int @id @default(autoincrement())
  name String
  login String @unique
  email String  
  password String
  token String?
}

model GeneralSettings {
   id Int @id @default(autoincrement())
   currentAccount String
   mfi Int
   helpPhone String
   adsInPayments String?
}

model House {
  id Int @id @default(autoincrement())
  number String
  street Street @relation(fields: [streetId], references: [id])
  streetId Int
  subscriberAccounts SubscriberAccount[]
}

model Street {
  id Int @id @default(autoincrement())
  name String @unique
  type String
  houseNumbers House[]
  subscriberAccounts SubscriberAccount[]
}

model Owner{
  id Int @id @default(autoincrement())
  utr String
  passport String
  surname String
  name String
  middleName String
  phone String
  additionalPhone String
  email String?
  birthday DateTime? @db.Date
  subscriberAccountId Int @unique
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
}

model SubscriberAccount{
  id Int @id @default(autoincrement())
  apartment String?
  number String @unique
  contract String @unique
  contractDate DateTime @db.Date
  isLivingApartment Boolean
  residents Int
  period DateTime @db.Date
  isRemovalHouseholdWaste Boolean
  isEligibleForBenefit Boolean
  accountType String
  sector SectorType
  owner Owner?
  houseId Int
  house House @relation(fields: [houseId], references: [id])
  streetId Int
  street Street @relation(fields: [streetId], references: [id])
  documents Document[]
  priceAdjustments PriceAdjustment[]
  payments Payment[]
  prices Price[]
  balances Balance[]
}

model Tariff{
  id Int @id @default(autoincrement())
  price Float
  sector SectorType
  start DateTime @db.Date
  prices Price[]
}

model Document{
  id Int @id @default(autoincrement())
  name String
  comment String
  subscriberAccountId Int
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
  createdAt DateTime @default(now())
}

model Period{
  id Int @id @default(autoincrement())
  isCurrentPeriod Boolean
  start DateTime @db.Date @default(now())
  payments Payment[]
  prices Price[]
  balances Balance[]
  priceAdjustments PriceAdjustment[]
}

model PriceAdjustment{
  id Int @id @default(autoincrement())
  price Float
  date DateTime @db.Date
  comment String
  subscriberAccountId Int
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
  periodId Int
  period Period @relation(fields: [periodId], references: [id])
}

model Price{
  id Int @id @default(autoincrement())
  date DateTime
  residents Int
  tariffId Int
  tariff Tariff @relation(fields: [tariffId], references: [id])
  subscriberAccountId Int
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
  periodId Int
  period Period @relation(fields: [periodId], references: [id])
}

model Payment{
  id Int @id @default(autoincrement())
  amount Float
  source PaymentSource
  date DateTime @db.Date
  periodId Int
  period Period @relation(fields: [periodId], references: [id])
  subscriberAccountId Int
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
}

model Balance{
  id Int @id @default(autoincrement())
  amount Float
  createdAt DateTime @default(now())
  periodId Int
  period Period @relation(fields: [periodId], references: [id])
  subscriberAccount SubscriberAccount @relation(fields: [subscriberAccountId], references: [id])
  subscriberAccountId Int
}